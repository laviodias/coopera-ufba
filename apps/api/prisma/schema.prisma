// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  APPROVED
  BLOCK
  PENDING
}

enum DemandStatus {
  CREATED
  ACCEPTED
  FINISHED
  DELETED
}

enum ResearcherType {
  STUDENT
  TEACHER
}

enum ProposalStatus {
  CREATED
  ACCEPTED
  REJECTED
}

enum SimilarityMatchType {
  PROJECT
  DEMAND
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String
  img               String?
  password          String
  role              UserRole       @default(USER)
  status            UserStatus     @default(PENDING)
  resetToken        String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  company           Company?
  researcher        Researcher?
  proposalsSent     Proposal[]     @relation("ProposalSender")
  proposalsReceived Proposal[]     @relation("ProposalReceiver")
  notifications     Notification[]
}

model Keyword {
  id        String    @id @default(uuid())
  name      String    @unique
  projects  Project[]
  demands   Demand[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Company {
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @id
  contactName  String?
  contactEmail String?
  contactPhone String?
  demands      Demand[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Researcher {
  user                   User            @relation(fields: [userId], references: [id])
  userId                 String          @id
  urlLattes              String?
  researcherType         ResearcherType  @default(TEACHER)
  researchGroupsAsLeader ResearchGroup[] @relation("ResearchGroupLeader")
  researchGroupsAsMember ResearchGroup[] @relation("ResearchGroupMembers")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

model ResearchGroup {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String
  urlCNPQ        String?
  img            String?
  leader         Researcher      @relation(fields: [researcherId], references: [userId], name: "ResearchGroupLeader")
  researcherId   String
  knowledgeAreas KnowledgeArea[]
  members        Researcher[]    @relation("ResearchGroupMembers")
  projects       Project[]
  proposals      Proposal[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model KnowledgeArea {
  id                   String          @id @default(uuid())
  name                 String          @unique
  researchGroupsOfArea ResearchGroup[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model Project {
  id              String        @id @default(uuid())
  name            String        @unique
  link            String?
  researchGroup   ResearchGroup @relation(fields: [researchGroupId], references: [id])
  researchGroupId String
  demand          Demand?       @relation(fields: [demandId], references: [id])
  demandId        String?
  keywords        Keyword[]
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Demand {
  id          String       @id @default(uuid())
  name        String
  link        String?
  company     Company      @relation(fields: [companyId], references: [userId])
  companyId   String
  description String
  status      DemandStatus @default(CREATED)
  public      Boolean      @default(true)
  projects    Project[]
  keywords    Keyword[]
  attachments Attachment[]
  proposals   Proposal[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  url       String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  url       String
  demand    Demand   @relation(fields: [demandId], references: [id])
  demandId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proposal {
  id              String         @id @default(uuid())
  demand          Demand         @relation(fields: [demandId], references: [id])
  demandId        String
  researchGroup   ResearchGroup  @relation(fields: [researchGroupId], references: [id])
  researchGroupId String
  sender          User           @relation(fields: [senderId], references: [id], name: "ProposalSender")
  senderId        String
  receiver        User           @relation(fields: [receiverId], references: [id], name: "ProposalReceiver")
  receiverId      String
  message         String
  status          ProposalStatus
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model SimilarityMatch {
  id          String   @id @default(uuid())
  sourceType  SimilarityMatchType
  sourceId    String
  targetType  SimilarityMatchType
  targetId    String
  score       Float
  createdAt   DateTime @default(now())

  @@index([sourceType, sourceId])
}
